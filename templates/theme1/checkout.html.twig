{% extends 'theme1/layout.html.twig' %}

{% set service_page_links %}
    {% for text,link in current_store.links %}
        <li class="nav-item"><a href="{{ link }}" class="nav-link">{{ text }}</a></li>
    {% endfor %}
{% endset %}
{% set service = {
    'page_name': current_store.name,
    'page_logo_link': '/' ~ current_store.url,
    'page_author': current_store.owner.username,
    'page_description': current_store.description,
    'page_keywords': current_store.keywords|join(','),
    'page_links': service_page_links,
    'page_google_webdev': current_store.googleWebDeveloper,
    'page_ga_id': current_store.googleAnalyticsId,
    'page_logo_url': ''
} %}
{% set language = app.request.getLocale() %}
{% set currency = app.session.get('_currency') %}

{% block javascripts %}
    {{ parent() }}
    <script>
        $(document).ready(function() {
            // Has to be executed beacause google maps changes this automatically to "off"
            $("#pac-input").attr('autocomplete', 'nope');
        });

        var placeSearch, autocomplete;
        var componentForm = {
            street_number: 'short_name',
            route: 'long_name',
            locality: 'long_name',
            //administrative_area_level_1: 'short_name',
            country: 'long_name',
            postal_code: 'short_name'
        };
        var input_ids = {
            street_number: 'checkout_location_street_number',
            route: 'checkout_location_street',
            locality: 'checkout_location_city',
            country: 'checkout_location_country',
            postal_code: 'checkout_location_postal_code'
        };

        function initAutocomplete() {
            // Create the autocomplete object, restricting the search to geographical
            // location types.
            autocomplete = new google.maps.places.Autocomplete(
                /** @type {!HTMLInputElement} */(document.getElementById('pac-input')),
                {types: ['geocode']});

            // When the user selects an address from the dropdown, populate the address
            // fields in the form.
            autocomplete.addListener('place_changed', fillInAddress);
        }

        // [START region_fillform]
        function fillInAddress() {
            // Get the place details from the autocomplete object.
            var place = autocomplete.getPlace();

            /** Not Required as can be predefined by user
             for (var component in componentForm) {
                document.getElementById(component).value = '';
                document.getElementById(component).disabled = false;
            }
             */
            // Get each component of the address from the place details
            // and fill the corresponding field on the form.
            for (var i = 0; i < place.address_components.length; i++) {
                var addressType = place.address_components[i].types[0];
                if (componentForm[addressType]) {
                    var val = place.address_components[i][componentForm[addressType]];
                    console.log(input_ids[addressType]);
                    document.getElementById(input_ids[addressType]).value = val;
                }
            }
        }
        // [END region_fillform]

        // [START region_geolocation]
        // Bias the autocomplete object to the user's geographical location,
        // as supplied by the browser's 'navigator.geolocation' object.
        function geolocate() {
            if (navigator.geolocation) {
                navigator.geolocation.getCurrentPosition(function(position) {
                    var geolocation = {
                        lat: position.coords.latitude,
                        lng: position.coords.longitude
                    };
                    var circle = new google.maps.Circle({
                        center: geolocation,
                        radius: position.coords.accuracy
                    });
                    autocomplete.setBounds(circle.getBounds());
                });
            }
        }
        // [END region_geolocation]
    </script>
    <script src="https://maps.googleapis.com/maps/api/js?key=AIzaSyBSO1fpoQuukeVKiueZxzqhLCFlkgP0IMM&libraries=places&callback=initAutocomplete" async defer></script>
    <script>
        class Checkout {
            constructor(options) {
                // Set all options
                this.options = {
                    'debug': false,
                    'voucher': {
                        'nr': 0,
                        'check_voucher': null,
                        'check_voucher_url': null,
                        'voucher_code': null,
                        'loading': null,
                        'table': null,
                        'table_body': null,
                    },
                    'shipping': {

                    },
                    'payment': {

                    },
                    'cart': {
                        'clear_cart': null,
                        'clear_cart_url': null,
                        'remove_product': null,
                        'remove_product_url': null,
                        'product_quantity': null,
                        'total_each_product': null,
                        'total_product': null,
                        'total_voucher': null,
                        'subtotal': null,
                        'shipping': null,
                        'total': null,
                        'total_input': null
                    },
                };
                // Override defaults
                $.extend(true, this.options, options);

                // Set clear_checkout listener
                this.options.cart.clear_cart.click({'checkout': this}, function(event) {
                    event.preventDefault();
                    event.data.checkout.clearCart();
                });

                // Set the quantity change listener
                this.options.cart.product_quantity.on('input', {'checkout': this}, function(event) {
                    let elemInput = $(this);
                    let elemPrice = $('#' + elemInput.attr('name') + '_price');
                    let elemTotal = $('#' + elemInput.attr('name') + '_total');
                    let quantity = parseInt(elemInput.val());

                    let newTotalPrice = parseFloat(elemPrice.text()) * quantity;
                    elemInput.val(quantity);
                    elemTotal.text(number_format(newTotalPrice, 2, '.', '\''));

                    if (elemPrice.text() !== '{{ 'service_general.free'|trans }}') {
                        event.data.checkout.updateTotal();
                    }

                    if (event.data.checkout.debug) console.log(elemInput.attr('id') + ' has changed quantity to ' + elemInput.val());
                });

                // Set the check voucher listener
                this.options.voucher.check_voucher.click({'checkout': this}, function(event) {
                    event.data.checkout.checkVoucher();
                });
            }

            static createSuccessNotification(text) {
                new Noty({
                    text: text,
                    timeout: 3000,
                    type: 'success',
                    layout: 'topRight',
                    closeWith: ['click', 'button'],
                    animation: {
                        open : 'animated fadeInRight',
                        close: 'animated fadeOutRight'
                    }
                }).show();
            }

            static createFailureNotification(text) {
                new Noty({
                    text: text,
                    timeout: 3000,
                    type: 'error',
                    layout: 'topRight',
                    closeWith: ['click', 'button'],
                    animation: {
                        open : 'animated fadeInRight',
                        close: 'animated fadeOutRight'
                    }
                }).show();
            }

            clearCart() {
                if (this.options.debug) console.log('Clearing cart...');
                $.ajax({
                    url: this.options.cart.clear_cart_url,
                    type: 'GET'
                }).done(function(data) {
                    location.reload();
                }).fail(function() {
                    Checkout.createFailureNotification('Could not clear cart');
                });
            }

            removeProduct(productId, count) {
                count = count || 0;

                $.ajax({
                    method: 'POST',
                    url: this.options.cart.remove_product_url,
                    data: { product: productId, product_count: count, response: 'json' },
                    async: true,
                    beforeSend: function(xhr) {
                        xhr.overrideMimeType('text/plain; charset=x-user-defined');
                    }
                }).done(function(data) {
                    let response = JSON.parse(data);
                    if(response['result'] === 'true') {
                        Checkout.createSuccessNotification('[Checkout] Product deleted');
                    } else {
                        Checkout.createFailureNotification('Product couldn\'t be removed, try again.');
                    }
                }).fail(function() {
                    Checkout.createFailureNotification('Product couldn\'t be removed, try again.');
                });
            }

            checkVoucher() {
                this.options.voucher.loading.show();
                $.ajax({
                    url: this.options.voucher.check_voucher_url,
                    type: 'GET',
                    data: { code : this.options.voucher.voucher_code.val() }
                }).done(function(data) {
                    checkout.options.voucher.loading.hide();
                    let validation = $(data).find('result').first().text();
                    if(validation === 'invalid') {
                        Checkout.createFailureNotification('{{ 'service_checkout.voucher.invalid'|trans }}');
                    }
                    else if(validation === 'valid') {
                        let reduceType = parseInt($(data).find('type').first().text(), 10);
                        let amount = $(data).find('amount').first().text();
                        let code = $(data).find('code').first().text();

                        let codeExists = false;
                        $('.js-voucher-codes').each(function() {
                            if ($(this).text() === code) {
                                codeExists = true;
                            }
                        });
                        if (codeExists) {
                            Checkout.createFailureNotification('{{ 'service_checkout.voucher.invalid'|trans }}');
                            return;
                        }

                        Checkout.createSuccessNotification('{{ 'service_checkout.voucher.valid'|trans }}');

                        checkout.options.voucher.table.show();
                        checkout.addVoucher(reduceType, amount, code);

                        checkout.updateTotal();
                    }
                }).fail(function() {
                    Checkout.createFailureNotification('{{ 'service_checkout.voucher.invalid'|trans }}');
                    if (this.options.debug) console.error('Ajax failed for voucher check!');
                });
            }

            calculateType0Voucher(productTotal, voucherList, index) {
                index = (typeof index === 'undefined') ? 0 : index;

                if (voucherList.length === 0) return 0;

                let discount = productTotal * (voucherList[index] / 100);

                if (index + 1 !== voucherList.length) {
                    discount += this.calculateType0Voucher(productTotal - discount, voucherList, index + 1);
                }

                return discount;
            }

            addVoucher(reduceType, amount, code) {
                this.options.voucher.nr++;
                if (reduceType === 0) {
                    this.options.voucher.table_body.append('<tr>' +
                        '<td scope="row" class="js-voucher">' +
                        this.options.voucher.nr +
                        '<span class="js-voucher-type" style="display:none">0</span>' +
                        '<span class="js-voucher-amount" style="display:none">' + amount + '</span>' +
                        '</td>' +
                        '<td class="js-voucher-codes">' + code + '</td>' +
                        '<td>{{ 'service_checkout.voucher.percentage'|trans }}</td>' +
                        '<td>' + amount + '%</td>' +
                        '</tr>');
                } else if (reduceType === 1) {
                    this.options.voucher.table_body.append('<tr>' +
                        '<td scope="row" class="js-voucher">' +
                        this.options.voucher.nr +
                        '<span class="js-voucher-type" style="display:none">0</span>' +
                        '<span class="js-voucher-amount" style="display:none">' + number_format(amount, 2, '.', '\'') + '</span>' +
                        '</td>' +
                        '<td class="js-voucher-codes">' + code + '</td>' +
                        '<td>{{ 'service_checkout.voucher.exact'|trans }}</td>' +
                        '<td>' + number_format(amount, 2, '.', '\'') + '</td>' +
                        '</tr>');
                }
            }

            updateTotal() {
                // Get current total of all products
                let productTotal = 0;
                this.options.cart.total_each_product.each(function (index) {
                    let x = $(this).text();
                    productTotal += parseFloat(x.match(/-?(?:\d+(?:\.\d*)?|\.\d+)/)[0]);
                });

                // Update product total
                this.options.cart.total_product.text(number_format(productTotal, 2, '.', '\''));

                // Update Voucher 1 (Type 0)
                let vouchersType0 = [];
                let vouchersType1 = [];
                $('.js-voucher').each(function() {
                    let type = $(this).find('.js-voucher-type').text();
                    let amount = $(this).find('.js-voucher-amount').text();
                    if (type === 0 || type === "0") {
                        vouchersType0.push(amount);
                    } else if (type === 1 || type === "1") {
                        vouchersType1.push(amount);
                    }
                });
                let discount = this.calculateType0Voucher(productTotal, vouchersType0);
                this.options.cart.total_voucher.text(number_format(discount, 2, '.', '\''));

                // Update subtotal
                let subtotal = productTotal - discount;
                this.options.cart.subtotal.text(number_format(subtotal, 2, '.', '\''));

                // Update total
                let shipping = parseFloat(this.options.cart.shipping.text().match(/-?(?:\d+(?:\.\d*)?|\.\d+)/)[0]);
                let total = subtotal + shipping;
                this.options.cart.total.text(number_format(total, 2, '.', '\''));
                this.options.cart.total_input.val(total);
            }

            static checkoutSubtractQuantity(product_id) {
                let elemInput = $('[name=product_quantity_' + product_id + ']');
                let number = parseInt(elemInput.val());
                if(number - 1 < 0) {
                } else {
                    let newTotal = number - 1;
                    elemInput.val(newTotal);
                    elemInput.trigger('input');
                }
            }

            static checkoutAddQuantity(product_id) {
                let elemInput = $('[name=product_quantity_' + product_id + ']');
                let number = parseInt(elemInput.val());
                let newTotal = number + 1;
                elemInput.val(newTotal);
                elemInput.trigger('input');
            }
        }

        let checkout = new Checkout({
            'debug': {{ app.debug }},
            'voucher': {
                'voucher_code': $('#js-voucher-code'),
                'check_voucher': $('#js-check-voucher'),
                'check_voucher_url': '{{ path('store_do_check_voucher', {'store': current_store.url}) }}',
                'loading': $('#js-voucher-check-loading'),
                'table': $('.js-voucher-table-hidden'),
                'table_body': $('.js-voucher-table tbody'),
            },
            'shipping': {

            },
            'payment': {

            },
            'cart': {
                'clear_cart': $('.js-clear-checkout'),
                'clear_cart_url': '{{ path('store_do_clear_cart', {'store': current_store.url}) }}',
                'remove_product': null,
                'remove_product_url': '{{ path('store_do_remove_from_cart', {'store': current_store.url}) }}',
                'product_quantity': $('.js-product-quantity'),
                'total_each_product': $('.js-product-quantity-total'),
                'total_product': $('.js-product-price-total'),
                'total_voucher': $('.js-voucher-total'),
                'subtotal': $('.js-subtotal'),
                'shipping': $('.js-shipping-price'),
                'total': $('.js-total-price'),
                'total_input': $('[name=price]')
            },
        });
    </script>
    <script>
        // DELIVERY FUNCTIONALITY
        {# TODO: Delivery is still problematic #}
        let elShippingMethod = $('input[name=shipping]:checked', '#transport');
        let elShippingCost = $('.js-shipping-price');
        let elFormPriceHidden = $('[name=price]');
        let elFormPrice = $('.js-total-price');

        let transport_price, new_transport_price = 0, form_price, form_new_price = 0;
        transport_price = parseFloat($('input[name=shipping]:checked', '#transport').data('cost'));
        if (isNaN(transport_price)) {
            transport_price = parseFloat($('.js-shipping-price').text());
        }
        form_price = parseFloat($('[name=price]').val());

        $('#transport').find('input[type=radio]').on('change', function() {
            new_transport_price = parseFloat($('input[name=shipping]:checked', '#transport').data('cost'));
            form_new_price = form_price - transport_price + new_transport_price;
            /*
              if (!isNaN(old_price))
              old_price = price;
              console.log(old_price);
              price = parseFloat(elShippingMethod.data('cost'));
              console.log(price);
              var form_old_price = parseFloat(elFormPriceHidden.val());
              console.log(form_old_price);
              var form_new_price = form_old_price - old_price + price;
              console.log(form_new_price);
*/
            $('[name=price]').val(form_new_price);
            $('.js-total-price').text(number_format(form_new_price, 2, '.', '\''));
        });

    </script>
{% endblock %}

{% block title %}{{ 'service_checkout.title'|trans }} | {{ service.page_name }}{% endblock %}

{% block header %}
    <div class="container">
        <h1 class="mt-4 mb-2 pb-2 border-bottom">{{ current_store.name }}</h1>
    </div>
{% endblock %}

{% block breadcrumb %}
    <div class="container">
        <div class="mb-2 pb-2 border-bottom">
            <a class="btn btn-outline-primary" href="{{ path('store_index', {'store': current_store.url}) }}" role="button">{{ 'service_general.nav.home'|trans }}</a>
            <a class="btn btn-primary" href="{{ path('store_checkout', {'store': current_store.url}) }}" role="button">{{ 'service_general.nav.checkout'|trans }}</a>
        </div>
    </div>
{% endblock %}

{% block content %}
    <div class="container">
        {{ form_start(checkout_form, {'attr': {'class': 'row'}}) }}
        <section id="form" class="col-md-8 order-md-1">
            {% for message in app.session.flashbag.get('order_sent') %}
            <div id="order-sent" class="alert alert-success alert-dismissible" role="alert">
                <button type="button" class="close" data-dismiss="alert"><span aria-hidden="true">&times;</span><span class="sr-only">{{ 'service_general.close'|trans }}</span></button>
                {{ message }}
            </div>
            {% endfor %}
            {% for message in app.session.flashbag.get('order_not_sent') %}
            <div id="order-not-sent" class="alert alert-danger alert-dismissible" role="alert">
                <button type="button" class="close" data-dismiss="alert"><span aria-hidden="true">&times;</span><span class="sr-only">{{ 'service_general.close'|trans }}</span></button>
                {{ message }}
            </div>
            {% endfor %}
            {% set message_no_products_availbale = app.session.flashbag.get('products_unavailable') %}
            {% if message_no_products_availbale|length > 0 %}
                <div id="products-unavailable" class="alert alert-danger alert-dismissible" role="alert">
                    <button type="button" class="close" data-dismiss="alert"><span aria-hidden="true">&times;</span><span class="sr-only">{{ 'service_general.close'|trans }}</span></button>
                    {% for message in message_no_products_availbale %}
                        <p>{{ message }}</p>
                    {% endfor %}
                </div>
            {% endif %}

            <div id="voucher" class="card mb-2">
                <div class="card-body">
                    <div class="row">
                        <div class="col-md-8">
                            <label for="js-voucher-code">{{ 'service_checkout.voucher.voucher'|trans }}</label>
                            <div class="input-group">
                                <input type="text" id="js-voucher-code" class="form-control" name="voucher" value />
                                <div class="input-group-append">
                                    <button id="js-check-voucher" class="btn btn-primary" type="button">{{ 'service_checkout.voucher.check'|trans }}</button>
                                </div>
                            </div>
                        </div>
                        <div class="col-md-4">
                            <br />
                            <h4 id="js-voucher-check-loading" style="display: none;"><i class="fa fa-refresh fa-spin" aria-hidden="true"></i></h4>
                        </div>
                    </div>
                    <div class="table-responsive mt-3 js-voucher-table-hidden" style="display: none">
                        <table class="table table-sm table-bordered table-hover table-striped js-voucher-table">
                            <thead>
                            <tr>
                                <th scope="col">#</th>
                                <th scope="col">{{ 'service_checkout.voucher.code'|trans }}</th>
                                <th scope="col">{{ 'service_checkout.voucher.type'|trans }}</th>
                                <th scope="col">{{ 'service_checkout.voucher.amount'|trans }}</th>
                            </tr>
                            </thead>
                            <tbody></tbody>
                        </table>
                    </div>
                </div>
            </div>

            <div id="transport" class="card mb-2">
                <div class="card-body">
                    <label>{{ 'service_checkout.shipping_method.title'|trans }}</label>
                    <div class="table-responsive">
                        <table class="table table-hover">
                            <tbody>
                                {% set deliveryPrice = 0 %}
                                {% for delivery in delivery_types %}
                                    <tr>
                                        <td><input type="radio" name="shipping" value="{{ delivery.id }}" data-cost="{{ delivery.price }}" /></td>
                                        <td>{{ delivery.type }}</td>
                                        <td><b>{{ delivery.price }} {{ currency }}</b><br />{{ delivery.description }}</td>
                                    </tr>
                                {% endfor %}
                            </tbody>
                        </table>
                    </div>
                </div>
            </div>

            <div id="payment-method" class="card mb-2">
                <div class="card-body">
                    {% if payment is null %}
                        <p>{{ 'service_checkout.payment_method.no_method'|trans }}</p>
                    {% else %}
                        {% if payment.method.type == 'braintree_production' or payment.method.type == 'braintree_sandbox' %}
                            <script src="https://js.braintreegateway.com/web/dropin/1.10.0/js/dropin.min.js"></script>
                            <input type="hidden" name="payment_method_nonce" value="fake-valid-nonce" />
                            <div id="dropin-container"></div>
                            <button id="submit-button" class="btn btn-success btn-block">{{ 'service_checkout.payment_method.braintree.validate'|trans }}</button>
                            <script>
                                braintree.dropin.create({
                                    authorization: '{{ payment.client_token }}',
                                    container: '#dropin-container',
                                    paypal: {
                                        flow: 'vault'
                                    }
                                }, function (createErr, instance) {
                                    $('#submit-button').click(function (event) {
                                        event.preventDefault();
                                        instance.requestPaymentMethod(function (err, payload) {
                                            if (err) {
                                                // Handle error in Hosted Fields tokenization
                                                console.log('Error', err);
                                                return;
                                            }
                                            // Submit payload.nonce to your server
                                            // Put `payload.nonce` into the `payment-method-nonce` input, and then
                                            // submit the form. Alternatively, you could send the nonce to your server
                                            // with AJAX.
                                            document.querySelector('input[name="payment_method_nonce"]').value = payload.nonce;
                                            $('#checkout_send').attr('disabled', false);
                                        });
                                    });
                                });
                            </script>
                        {% endif %}
                    {% endif %}
                </div>
            </div>

            <div id="cart" class="card mb-2">
                <div class="card-body">
                    <label>{{ 'service_checkout.cart.title'|trans }}</label>
                    <span class="pull-right"><a href="#" class="btn btn-danger btn-sm js-clear-checkout">{{ 'service_checkout.cart.clear'|trans }}</a></span>
                    {% if cart|length > 0 %}
                        <div class="table-responsive">
                            <table class="table table-hover">
                                <thead>
                                    <tr>
                                        <th>{{ 'service_checkout.cart.table.product'|trans }}</th>
                                        <th style="min-width:9rem">{{ 'service_checkout.cart.table.quantity'|trans }}</th>
                                        <th style="min-width:5rem">{{ 'service_checkout.cart.table.price'|trans }}</th>
                                        <th style="min-width:7rem">{{ 'service_checkout.cart.table.total'|trans }}</th>
                                        <th style="min-width:7.5rem"> </th>
                                    </tr>
                                </thead>
                                <tbody>
                                    {% set productPrice = 0 %}
                                    {% for product in cart %}
                                        <tr>
                                            <td>
                                                <div class="media">
                                                    {#<a class="thumbnail pull-left" style="border: 0;" href="#"> <img class="media-object" src="{{ asset('app/store/products_img/' ~ product.id ~ '/' ~ product.small_icon) }}" style="width: 72px; height: 72px;"> </a>#}
                                                    <a class="thumbnail pull-left" href="{{ path('store_product', {'store': current_store.url, 'product': product.id}) }}">
                                                        <img class="media-object" src="http://icons.iconarchive.com/icons/custom-icon-design/flatastic-2/72/product-icon.png" style="width: 72px; height: 72px;">
                                                    </a>
                                                    <div class="media-body pl-1 pt-1">
                                                        <h4 class="media-heading"><a href="{{ path('store_product', {'store': current_store.url, 'product': product.id}) }}">{{ product.name }}</a></h4>
                                                        <span>{{ 'service_checkout.cart.table.status'|trans }} </span>
                                                        <span class="text-success"><strong>{% if product.stock > 0 %}{{ 'service_checkout.cart.table.in_stock'|trans }} ({{ product.stock }}){% endif %}</strong></span>
                                                    </div>
                                                </div>
                                            </td>
                                            <td>
                                                <div class="input-group">
                                                    <div class="input-group-prepend">
                                                        <button class="btn btn-secondary" type="button" name="subtract" onclick="Checkout.checkoutSubtractQuantity('{{ product.id }}')" value="-">-</button>
                                                    </div>
                                                    <input type="text" class="form-control text-center js-product-quantity" name="product_quantity_{{ product.id }}" value="{{ product.in_cart }}" title="quantity" />
                                                    <div class="input-group-append">
                                                        <button class="btn btn-secondary" type="button" name="add" onclick="Checkout.checkoutAddQuantity('{{ product.id }}')" value="+">+</button>
                                                    </div>
                                                </div>
                                            </td>
                                            <td>
                                                {% if product.price == 0 %}
                                                    {{ 'service_general.free'|trans }}
                                                {% else %}
                                                    {% if product.in_sale %}
                                                        <s>{{ product.price|number_format(2, '.', '\'') }} {{ currency }}</s><br />
                                                        {% if product.price_sale == 0 %}
                                                            {{ 'service_general.free'|trans }}
                                                        {% else %}
                                                            <span id="product_quantity_{{ product.id }}_price">{{ product.price_sale|number_format(2, '.', '\'') }}</span> {{ currency }}
                                                        {% endif %}
                                                    {% else %}
                                                        <span id="product_quantity_{{ product.id }}_price">{{ product.price|number_format(2, '.', '\'') }}</span> {{ currency }}
                                                    {% endif %}
                                                {% endif %}
                                            </td>
                                            <td>
                                                {% set product_total_price = product.price * product.in_cart %}
                                                {% set product_total_price_sale = product.price_sale * product.in_cart %}

                                                {% if product_total_price == 0 %}
                                                    {{ 'service_general.free'|trans }}
                                                {% else %}
                                                    {% if product.in_sale %}
                                                        <s>{{ product_total_price|number_format(2, '.', '\'') }} {{ currency }}</s><br />
                                                        <b>{% if product_total_price_sale == 0 %}
                                                                {{ 'service_general.free'|trans }}
                                                            {% else %}
                                                                <span class="js-product-quantity-total" id="product_quantity_{{ product.id }}_total">{{ product_total_price_sale|number_format(2, '.', '\'') }}</span> {{ currency }}
                                                            {% endif %}</b>
                                                    {% else %}
                                                        <b><span class="js-product-quantity-total" id="product_quantity_{{ product.id }}_total">{{ product_total_price|number_format(2, '.', '\'') }}</span> {{ currency }}</b>
                                                    {% endif %}
                                                {% endif %}
                                            </td>
                                            <td>
                                                <a href="{{ path('store_do_remove_from_cart', {'store': current_store.url, 'product': product.id}) }}" class="btn btn-danger"><i class="fa fa-times" aria-hidden="true"></i> {{ 'service_checkout.cart.table.remove'|trans }}</a>
                                            </td>
                                        </tr>
                                        {% if product.in_sale %}
                                            {% set productPrice = productPrice + product_total_price_sale %}
                                        {% else %}
                                            {% set productPrice = productPrice + product_total_price %}
                                        {% endif %}
                                    {% endfor %}
                                    {% set fullPrice = productPrice + deliveryPrice %}
                                </tbody>
                            </table>
                        </div>
                        <hr />
                        <div class="row">
                            <div class="col-5"> </div>
                            <div class="col-4"><h5>{{ 'service_checkout.cart.table.product_total'|trans }}</h5></div>
                            <div class="col-3"><h5 class="text-right"><strong><span class="js-product-price-total">{{ productPrice|number_format(2, '.', '\'') }}</span> {{ currency }}</strong></h5></div>
                        </div>
                        <hr />
                        <div class="row">
                            <div class="col-5"> </div>
                            <div class="col-4"><h5>{{ 'service_checkout.cart.table.voucher_total'|trans }}</h5></div>
                            <div class="col-3"><h5 class="text-right"><strong><span class="js-voucher-total">0.00</span> {{ currency }}</strong></h5></div>
                        </div>
                        <hr />
                        <div class="row">
                            <div class="col-5"> </div>
                            <div class="col-4"><h5>{{ 'service_checkout.cart.table.subtotal'|trans }}</h5></div>
                            <div class="col-3"><h5 class="text-right"><strong><span class="js-subtotal">{{ productPrice|number_format(2, '.', '\'') }}</span> {{ currency }}</strong></h5></div>
                        </div>
                        <hr />
                        <div class="row">
                            <div class="col-5"> </div>
                            <div class="col-4"><h5>{{ 'service_checkout.cart.table.shipping'|trans }}</h5></div>
                            <div class="col-3"><h5 class="text-right"><strong><span class="js-shipping-price">{{ deliveryPrice|number_format(2, '.', '\'') }}</span> {{ currency }}</strong></h5></div>
                        </div>
                        <hr />
                        <div class="row">
                            <div class="col-5"> </div>
                            <div class="col-3"><h3>{{ 'service_checkout.cart.table.total'|trans }}</h3></div>
                            <div class="col-4"><h3 class="text-right"><strong><span class="js-total-price">{{ fullPrice|number_format(2, '.', '\'') }}</span> {{ currency }}</strong></h3></div>
                            <input type="hidden" name="price" value="{{ fullPrice }}" />
                        </div>
                    {% else %}
                        <p class="text-center text-warning"><b>{{ 'service_checkout.cart.empty'|trans }}</b></p>
                    {% endif %}
                </div>
            </div>

            <div id="order-button" class="card">
                <div class="card-body">
                    <span class="pull-right">
                        {{ form_widget(checkout_form.send, {'attr': {'class': 'btn btn-success'}, 'disabled': true}) }}
                    </span>
                </div>
            </div>
        </section>

        <section id="personal-information" class="col-md-4 order-first order-md-2 mb-2">
            <div class="card">
                <div class="card-body">
                    <div class="form-group">
                        {{ form_label(checkout_form.name) }}
                        {{ form_widget(checkout_form.name, {'attr': {'class': 'form-control'}}) }}
                        <span class="help-block text-danger">{{ form_errors(checkout_form.name) }}</span>
                    </div>
                    <div class="form-group">
                        {{ form_label(checkout_form.email) }}
                        {{ form_widget(checkout_form.email, {'attr': {'class': 'form-control'}}) }}
                        <span class="help-block text-danger">{{ form_errors(checkout_form.email) }}</span>
                    </div>
                    <div class="form-group">
                        {{ form_label(checkout_form.phone) }}
                        {{ form_widget(checkout_form.phone, {'attr': {'class': 'form-control'}}) }}
                        <span class="help-block text-danger">{{ form_errors(checkout_form.phone) }}</span>
                    </div>
                    <hr />
                    <div class="form-group">
                        <input class="form-control" id="pac-input" placeholder="{{ 'service_checkout.form.location.placeholder'|trans }}" autocomplete="nope" onfocus="geolocate()" />
                    </div>
                    <div class="form-group">
                        <div class="row">
                            <div class="col col-xs-8">
                                {{ form_label(checkout_form.location_street) }}
                                {{ form_widget(checkout_form.location_street, {'attr': {'class': 'form-control'}}) }}
                                <span class="help-block text-danger">{{ form_errors(checkout_form.location_street) }}</span>
                            </div>
                            <div class="col col-xs-4">
                                {{ form_label(checkout_form.location_street_number) }}
                                {{ form_widget(checkout_form.location_street_number, {'attr': {'class': 'form-control'}}) }}
                                <span class="help-block text-danger">{{ form_errors(checkout_form.location_street_number) }}</span>
                            </div>
                        </div>
                    </div>
                    <div class="form-group">
                        <div class="row">
                            <div class="col col-xs-4">
                                {{ form_label(checkout_form.location_postal_code) }}
                                {{ form_widget(checkout_form.location_postal_code, {'attr': {'class': 'form-control'}}) }}
                                <span class="help-block text-danger">{{ form_errors(checkout_form.location_postal_code) }}</span>
                            </div>
                            <div class="col col-xs-8">
                                {{ form_label(checkout_form.location_city) }}
                                {{ form_widget(checkout_form.location_city, {'attr': {'class': 'form-control'}}) }}
                                <span class="help-block text-danger">{{ form_errors(checkout_form.location_city) }}</span>
                            </div>
                        </div>
                    </div>
                    <div class="form-group">
                        {{ form_label(checkout_form.location_country) }}
                        {{ form_widget(checkout_form.location_country, {'attr': {'class': 'form-control'}}) }}
                        <span class="help-block text-danger">{{ form_errors(checkout_form.location_country) }}</span>
                    </div>
                </div>
            </div>
        </section>
        {{ form_end(checkout_form) }}
    </div>
{% endblock %}
